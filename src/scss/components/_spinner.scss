@use "sass:map";
@use "sass:color";

@use "../abstracts/variables";
@use "../abstracts/tokens";
@use "../abstracts/functions" as *;

.spinner {
	border-style: solid;
	border-color: tokens.$spinner-background-color;
	border-top-color: tokens.$spinner-color;
	border-radius: 100%;
	aspect-ratio: 1;
	box-shadow:
		0 -3px 6px 0 hsla(color.hue(tokens.$spinner-color), color.saturation(tokens.$spinner-color), color.lightness(tokens.$spinner-color), 0.15),
		0 -6px 12px 0 hsla(color.hue(tokens.$spinner-color), color.saturation(tokens.$spinner-color), color.lightness(tokens.$spinner-color), 0.1),
		0 -9px 18px 0 hsla(color.hue(tokens.$spinner-color), color.saturation(tokens.$spinner-color), color.lightness(tokens.$spinner-color), 0.05),
		inset 0 1px 2px 0
			hsla(
				color.hue(tokens.$spinner-color),
				color.saturation(tokens.$spinner-color),
				color.lightness(tokens.$spinner-color),
				0.15
			),
		inset 0 2px 4px 0
			hsla(
				color.hue(tokens.$spinner-color),
				color.saturation(tokens.$spinner-color),
				color.lightness(tokens.$spinner-color),
				0.1
			),
		inset 0 3px 6px 0
			hsla(
				color.hue(tokens.$spinner-color),
				color.saturation(tokens.$spinner-color),
				color.lightness(tokens.$spinner-color),
				0.05
			);
	animation: spin 900ms cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite !important;

	@each $key in map.keys(variables.$sizes) {
		$selector: '&[data-size="#{$key}"]';

		@if (tokens.$size == size($key)) {
			$selector: "&, #{$selector}";
		}

		#{$selector} {
			block-size: size("#{$key}");
			border-width: calc(size("#{$key}") / 10);
		}
	}
}

@keyframes spin {
	0% {
		transform: rotate(0deg);
	}

	100% {
		transform: rotate(360deg);
	}
}
